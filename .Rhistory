#-1 is assigned to SCREENING as it occurs before the baseline record.
daysFromBaseline = recode(as.numeric(AVISIT),-1,0,7,14,21,28),
endDiffBaselineALT = ALT[which(VISIT_NUM == 5)] - ALT[which(VISIT_NUM == 0)],
endDiffBaselineCRP = CRP[which(VISIT_NUM == 5)] - CRP[which(VISIT_NUM == 0)],
endDiffBaselineIGA = IGA[which(VISIT_NUM == 5)] - IGA[which(VISIT_NUM == 0)]
) %>%
select(-c("VISIT_NUM","AVISIT"))
shiny::runApp()
runApp()
screeningTable = function(screeningData = screeningFrame,globalCovariate,selCovariate){
if(class(screeningData[[selCovariate]]) == 'numeric'){
selCovariate = rlang::sym(selCovariate)
if(globalCovariate == "Yes"){
byArmSummary = screeningFrame %>%
group_by(treatmentArm) %>%
summarise('Mean' = mean(!!selCovariate),
'Standard Deviation' = sd(!!selCovariate),
'Median' = median(!!selCovariate),
'Minimum' = min(!!selCovariate),
'Maximum' = max(!!selCovariate),
'Total Patients' = n()
) %>%
mutate_if(is.numeric,function(x){round(x,2)})
overallSummary = screeningFrame %>%
summarise('treatmentArm' = 'Overall',
'Mean' = mean(!!selCovariate),
'Standard Deviation' = sd(!!selCovariate),
'Median' = median(!!selCovariate),
'Minimum' = min(!!selCovariate),
'Maximum' = max(!!selCovariate),
'Total Patients' = n()
) %>%
mutate_if(is.numeric,function(x){round(x,2)})
screenTable = rbind(overallSummary,byArmSummary)
}else if(globalCovariate == "No"){
screenTable = screeningFrame %>%
group_by(treatmentArm) %>%
summarise('Mean' = mean(!!selCovariate),
'Standard Deviation' = sd(!!selCovariate),
'Median' = median(!!selCovariate),
'Minimum' = min(!!selCovariate),
'Maximum' = max(!!selCovariate),
'Total Patients' = n()
) %>%
mutate_if(is.numeric,function(x){round(x,2)})
}
}else if(class(screeningData[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
byArmTable = round(prop.table(margin = 1, table(screeningFrame[['treatmentArm']],screeningFrame[[selCovariate]])),3)
overallTable = round(prop.table(table(screeningFrame[[selCovariate]])),3)
screenTable = rbind(byArmTable,overallTable)
}else if(globalCovariate == "No"){
screenTable = round(prop.table(margin = 1,table(screeningFrame[['treatmentArm']],screeningFrame[[selCovariate]])),3)
}
}
return(screenTable)
}
runApp()
packrat::init()
packrat::on()
shiny::runApp('~/Desktop/programmingExercise')
packrat::on()
packrat::on()
packrat::on()
install.packages('data.table')
packrat::on()
packrat::init()
packrat::on()
packrat::restore()
packrat::off()
shiny::runApp('~/Desktop/programmingExercise')
packrat::init()
install.packages('data.table')
install.packages("data.table")
library(data.table)
packrat::init()
install.packages('Matrix')
packrat::on()
packrat::on()
install.packages('nlme')
library(nlme)
packrat::init()
packrat::init()
shiny::runApp('~/Desktop/programmingExercise')
runApp()
runApp()
runApp()
packrat::on()
runApp()
install.packages('shinydashboard')
install.packages('dplyr')
runApp()
install.packages('ggplot2')
install.packages('forcats')
install.packages('data.table')
install.packages('reshape2')
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
packrat::status()
packrat::snapshot()
packrat::status()
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
packrat::snapshot()
packrat::clean()
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
packrat::status()
packrat::snapshot()
packrat::status()
install.packages(c('shiny','shinydashboard','dplyr','ggplot2',
'forcats','data.table','reshape2'))
runApp()
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
packrat::status()
packrat::snapshot()
packrat::status()
packrat::snapshot()
install.packages(c("BH","plogr"))
packrat::snapshot()
install.packages('testthat')
packrat::snapshot()
packrat::snapshot()
packrat::on()
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
packrat::bundle()
packrat::restore()
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
Sys.info()
sessionInfo()
packrat::off()
sessionInfo()
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
packrat::on()
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
library(ggplot2)
gglegend
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
?scale_colour_manual
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
PatientLevelInfo
PatientLevelInfo$treatmentArm
PatientLevelInfo = fread("Random_PatientLevelInfo_2020.tsv", stringsAsFactors = T)
PatientLevelInfo$ACTARMCD
PatientLevelInfo$ACTARM
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
?scale_colour_discrete
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
names(TrialFrame)
TrialFrame$sex
glimpse(TrialFrame %>% select_if(is.factor))
glimpse(TrialFrame %>% select_if(is.factor))
TrialFrame %>% select_if(is.factor)
dplyr::(TrialFrame %>% select_if(is.factor))
dplyr::glimpse(TrialFrame %>% select_if(is.factor))
install.packages('utf8')
dplyr::glimpse(TrialFrame %>% select_if(is.factor))
TrialFrame %>% mutate(race = tools::toTitleCase(race))
TrialFrame %>% mutate(race = tools::toTitleCase(paste(race)))
TrialFrame %>% mutate(race = tools::toTitleCase(paste(race))) %>% select(race)
tools::toTitleCase('WHITE')
stringr::str_to_title('WHITE')
stringr::str_to_title('WHITE AND AFRICAN')
TrialFrame %>%
mutate(race = stringr::str_to_title(paste(race))) %>%
select(race)
?recode
packrat::on()
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(forcats)
library(data.table)
library(reshape2)
sourceDir = function(path, trace = TRUE,...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir(path = "appFunctions/tab1Functions")
sourceDir(path = "appFunctions/tab2Functions")
PatientLevelInfo = fread("Random_PatientLevelInfo_2020.tsv", stringsAsFactors = T)
LabValuesInfo = fread("Random_LabValuesInfo_2020.tsv", stringsAsFactors = T)
#Cleaning Patient Level Info
#Extract potential region identifier and patient id from USUBJID and put back into table
splitFrame = tstrsplit(PatientLevelInfo$USUBJID,"-")
PatientLevelInfo$region = paste(splitFrame[[2]],splitFrame[[3]], sep = '-')
PatientLevelInfo$patientId = splitFrame[[5]]
#Recode a treatment arm variable to be a single word describing treatment
PatientLevelInfo$ACTARM = recode(PatientLevelInfo$ACTARM,
`A: Drug X` = "drugX",
`B: Placebo` = "placebo",
`C: Combination` = "combination"
)
PatientLevelInfo$ACTARM
packrat::on()
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(forcats)
library(data.table)
library(reshape2)
sourceDir = function(path, trace = TRUE,...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir(path = "appFunctions/tab1Functions")
sourceDir(path = "appFunctions/tab2Functions")
PatientLevelInfo = fread("Random_PatientLevelInfo_2020.tsv", stringsAsFactors = T)
LabValuesInfo = fread("Random_LabValuesInfo_2020.tsv", stringsAsFactors = T)
#Cleaning Patient Level Info
#Extract potential region identifier and patient id from USUBJID and put back into table
splitFrame = tstrsplit(PatientLevelInfo$USUBJID,"-")
PatientLevelInfo$region = paste(splitFrame[[2]],splitFrame[[3]], sep = '-')
PatientLevelInfo$patientId = splitFrame[[5]]
PatientLevelInfo$ACTARM = recode(PatientLevelInfo$ACTARM,
`B: Placebo` = "placebo",
`A: Drug X` = "drugX",
`C: Combination` = "combination",
.ordered = T
)
PatientLevelInfo$ACTARM = recode_factor(PatientLevelInfo$ACTARM,
`B: Placebo` = "placebo",
`A: Drug X` = "drugX",
`C: Combination` = "combination",
.ordered = T
)
PatientLevelInfo$ACTARM
PatientLevelInfo$ACTARM = recode_factor(PatientLevelInfo$ACTARM,
`B: Placebo` = "placebo",
`A: Drug X` = "drugX",
`C: Combination` = "combination"
)
PatientLevelInfo$ACTARM
packrat::on()
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(forcats)
library(data.table)
library(reshape2)
sourceDir = function(path, trace = TRUE,...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir(path = "appFunctions/tab1Functions")
sourceDir(path = "appFunctions/tab2Functions")
PatientLevelInfo = fread("Random_PatientLevelInfo_2020.tsv", stringsAsFactors = T)
LabValuesInfo = fread("Random_LabValuesInfo_2020.tsv", stringsAsFactors = T)
#Cleaning Patient Level Info
#Extract potential region identifier and patient id from USUBJID and put back into table
splitFrame = tstrsplit(PatientLevelInfo$USUBJID,"-")
PatientLevelInfo$region = paste(splitFrame[[2]],splitFrame[[3]], sep = '-')
PatientLevelInfo$patientId = splitFrame[[5]]
#Recode a treatment arm variable to be a single word describing treatment
PatientLevelInfo$ACTARM = recode_factor(PatientLevelInfo$ACTARM,
`B: Placebo` = "placebo",
`A: Drug X` = "drugX",
`C: Combination` = "combination"
)
PatientLevelInfo$ACTARM
packrat::on()
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(forcats)
library(data.table)
library(reshape2)
sourceDir = function(path, trace = TRUE,...) {
for (nm in list.files(path, pattern = "\\.[RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir(path = "appFunctions/tab1Functions")
sourceDir(path = "appFunctions/tab2Functions")
PatientLevelInfo = fread("Random_PatientLevelInfo_2020.tsv", stringsAsFactors = T)
LabValuesInfo = fread("Random_LabValuesInfo_2020.tsv", stringsAsFactors = T)
#Cleaning Patient Level Info
#Extract potential region identifier and patient id from USUBJID and put back into table
splitFrame = tstrsplit(PatientLevelInfo$USUBJID,"-")
PatientLevelInfo$region = paste(splitFrame[[2]],splitFrame[[3]], sep = '-')
PatientLevelInfo$patientId = splitFrame[[5]]
#Recode a treatment arm variable to be a single word describing treatment
#Change the variable naming scheme of PatientLevelInfo to begin with lowercase and capitalize each subsequent concactenated word
#USUBJID remains the same because we will use it join LabValuesInfo and PatientLevelInfo
names(PatientLevelInfo) = c("studyId","USUBJID","age","sex","race","treatmentArm","actArmCd","region","patientId")
#Drop redundant columns
PatientLevelInfo = PatientLevelInfo %>%
select(-c("actArmCd"))
#Before merging LabValuesInfo to the PatientLevelInfo we
#reconstruct it so that a single row captures the patient's 3 laboratory value measurements at a particular visit
#calculate difference of measurements between visits for each patient
#calculate the difference betwee the last recorded value week 5 and the baseline value
#create a days from baseline variable
#metadata such as the long name of ALT is excluded from the frame but displayed in the application
PatientByVisit = LabValuesInfo %>%
#make screening the first level of ALT
mutate(AVISIT = fct_relevel(AVISIT,"SCREENING")) %>%
group_by(USUBJID,AVISIT) %>%
#Collect lab values by patient + visit
summarise(ALT = AVAL[which(LBTESTCD == 'ALT')],
CRP = AVAL[which(LBTESTCD == 'CRP')],
IGA = AVAL[which(LBTESTCD == "IGA")],
BMRKR1 = unique(BMRKR1),
BMRKR2 = unique(BMRKR2)) %>%
#I want baseline to be 0 and screening to be negative (before the trial)
mutate(VISIT_NUM = as.numeric(AVISIT) - 2,
diffALT = c(NA,diff(ALT)),
diffCRP = c(NA,diff(CRP)),
diffIGA = c(NA,diff(IGA)),
#-1 is assigned to SCREENING as it occurs before the baseline record.
daysFromBaseline = recode(as.numeric(AVISIT),-1,0,7,14,21,28),
endDiffBaselineALT = ALT[which(VISIT_NUM == 5)] - ALT[which(VISIT_NUM == 0)],
endDiffBaselineCRP = CRP[which(VISIT_NUM == 5)] - CRP[which(VISIT_NUM == 0)],
endDiffBaselineIGA = IGA[which(VISIT_NUM == 5)] - IGA[which(VISIT_NUM == 0)]
) %>%
select(-c("VISIT_NUM","AVISIT"))
names(PatientByVisit) = c("USUBJID","ALT","CRP","IGA","firstBiomarker","secondBiomarker",
"diffALT","diffCRP","diffIGA","daysFromBaseline",
"endDiffBaselineALT","endDiffBaselineCRP","endDiffBaselineIGA")
#Join together the PatientLevelInfo and PatientByVisit (formerly LabValuesInfo) frames
TrialFrame = left_join(PatientLevelInfo,PatientByVisit,by = 'USUBJID') %>%
mutate_if(is.integer,as.numeric)
#Changing the ordering and vlaues of some factor levels to be better formatted
dplyr::glimpse(TrialFrame %>% select_if(is.factor))
TrialFrame2 = TrialFrame %>%
mutate(sex = recode_factor(sex,
'F' = 'Female',
'M' = 'Male',
'UNDIFFERENTIATED' = 'Undifferentiated'),
race = as.factor(paste(stringr::str_to_title(race))),
secondBiomarker = recode_factor(secondBiomarker,
"LOW" = 'Low',
"MEDIUM" = 'Medium',
"HIGH" = 'High')
)
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
table(TrialFrame)
table(TrialFrame$treatmentArm)
TrialFrame = TrialFrame %>%
mutate(sex = recode_factor(sex,
'F' = 'Female',
'M' = 'Male',
'UNDIFFERENTIATED' = 'Undifferentiated'),
race = as.factor(paste(stringr::str_to_title(race))),
secondBiomarker = recode_factor(secondBiomarker,
"LOW" = 'Low',
"MEDIUM" = 'Medium',
"HIGH" = 'High'),
treatmentArm = recode_factor(treatmentArm,
'A: Drug X' = 'Arm A: Drug X',
'B: Placebo' = 'Arm B: Placebo',
'C: Combination' = 'Arm C: Combination'
)
)
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
names(TrialFrame)
variableDisplayNames = data.frame(shortname = c("age","sex","race","treatmentArm",
"ALT","CRP","IGA","firstBiomarker",
"secondBiomarker","diffALT","diffCRP",
"diffIGA","daysFromBaseline",
"endDiffBaselineALT","endDiffBaselineCRP",
"endDiffBaselineIGA"))
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
output$selScreeningTable = renderTable({
screeningTable(screeningData = screeningFrame,
globalCovariate = input$globalCovariate,
selCovariate = input$selCovariate,
countOrProportion = input$countOrProportion)
},
rownames = T)
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
?data.table
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
data.table(noScreenFrame)
data.table(noScreenFrame,keep.rownames = T)
rownames(screeningFrame) = screeningFrame$patientId
data.table(noScreenFrame,keep.rownames = T)
huh=data.table(noScreenFrame,keep.rownames = T)
rownames(huh)
huh$rn
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
DT
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
install
install.packages('DT')
DT
library(DT)
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
?renderDataTable
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
TrialFrame$treatmentArm
names(TrialFrame$treatmentArm)
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
?theme
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
LabValuesInfo
LabValuesInfo$LBTEST
table(LabValuesInfo$LBTEST,LabValuesInfo$AVALU)
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
aggList = list('Average At Each Time Point' = 'meanByTimepoint',
'Median At Each Time Point' = 'medianByTimepoint',
'Average Change Between Time Points' = 'meanChangeTimepoint',
'Median Change Between Time Points' = 'medianChangeTimepoint',
'Mean Change Across Full Trial' = 'meanChangeOverall',
'Median Change Across Full Trial' = 'medianChangeOverall')
aggList
aggList[["medianChangeOverall"]]
which(aggList == "medianChangeOverall")
names(which(aggList == "medianChangeOverall"))
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
names(TrialFrame)
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
runApp('~/Documents/GitHub/ShinyProgrammingExercise')
packrat::snapshot()
install.packages('isoband')
packrat::snapshot()
install.packages('testthat')
packrat::snapshot()
