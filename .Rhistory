pp <- ggplot(data = screeningFrame, aes(x = treatmentArm,fill = sex)) +
geom_bar(position = 'fill')
pp
pp <- ggplot(data = screeningFrame, aes(x = sex,fill = treatmentArm)) +
geom_bar(position = 'fill')
pp
pp <- ggplot(data = screeningFrame, aes(x = sex,fill = treatmentArm)) +
geom_bar(position = 'dodge')
pp
pp <- ggplot(data = screeningFrame, aes(x = sex,fill = treatmentArm)) +
geom_bar(position = 'fill')
pp
pp <- ggplot(data = screeningFrame, aes(x = sex,fill = treatmentArm)) +
geom_bar(position = 'dodge')
pp
pp <- ggplot(data = screeningFrame, aes(x = treatmentArm,fill = sex)) +
geom_bar(position = 'dodge')
pp
pp <- ggplot(data = screeningFrame, aes(x = treatmentArm,fill = sex)) +
geom_bar(position = 'fill')
pp
pp <- ggplot(data = screeningFrame, aes(x = treatmentArm,fill = sex)) +
geom_bar(position = 'fill')  + geom_bar(aes(x = "Overall",fill = sex))
pp
pp <- ggplot(data = screeningFrame, aes(x = treatmentArm,fill = sex)) +
geom_bar(position = 'fill')  + geom_bar(aes(x = "Overall",fill = sex),position='fill')
pp
p <- ggplot(data = screeningFrame, aes(x = age, colour = treatmentArm)) +
geom_density() + geom_density(aes(x = age, colour = "Overall"))
p
class(screeningFrame$age)
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(forcats)
library(data.table)
setwd("~/Documents/GitHub/ShinyProgrammingExercise")
PatientLevelInfo = fread("Random_PatientLevelInfo_2020.tsv", stringsAsFactors = T)
LabValuesInfo = fread("Random_LabValuesInfo_2020.tsv", stringsAsFactors = T)
#Cleaning Patient Level Info
#Extract potential region identifier and patient id from USUBJID and put back into table
splitFrame = tstrsplit(PatientLevelInfo$USUBJID,"-")
PatientLevelInfo$region = paste(splitFrame[[2]],splitFrame[[3]], sep = '-')
PatientLevelInfo$patientId = splitFrame[[5]]
#Recode a treatment arm variable to be a single word describing treatment
PatientLevelInfo$ACTARM = recode(PatientLevelInfo$ACTARM,
`A: Drug X` = "drugX",
`B: Placebo` = "placebo",
`C: Combination` = "combination"
)
PatientLevelInfo$ACTARM = forcats::fct_relevel(PatientLevelInfo$ACTARM,"placebo")
#Change the naming scheme of PatientLevelInfo to begin with lowercase and capitalize each subsequent concactenated word
#USUBJID remains the same because we will use it join LabValuesInfo and PatientLevelInfo
names(PatientLevelInfo) = c("studyId","USUBJID","age","sex","race","treatmentArm","actArmCd","region","patientId")
#Drop redundant columns
PatientLevelInfo = PatientLevelInfo %>%
select(-c("actArmCd"))
#Before merging LabValuesInfo to the PatientLevelInfo we
#reconstruct it so that a single row captures the patient's 3 laboratory value measurements at a particular visit
#calculate difference of measurements between visits for each patient
#calculate the difference betwee the last recorded value week 5 and the baseline value
#create a days from baseline variable
#metadata such as the long name of ALT is excluded from the frame but displayed in the application
PatientByVisit = LabValuesInfo %>%
#make screening the first level of ALT
mutate(AVISIT = forcats::fct_relevel(AVISIT,"SCREENING")) %>%
group_by(USUBJID,AVISIT) %>%
#Collect lab values by patient + visit
summarise(ALT = AVAL[which(LBTESTCD == 'ALT')],
CRP = AVAL[which(LBTESTCD == 'CRP')],
IGA = AVAL[which(LBTESTCD == "IGA")],
BMRKR1 = unique(BMRKR1),
BMRKR2 = unique(BMRKR2)) %>%
#I want baseline to be 0 and screening to be negative (before the trial)
mutate(VISIT_NUM = as.numeric(AVISIT) - 2,
diffALT = c(NA,diff(ALT)),
diffCRP = c(NA,diff(CRP)),
diffIGA = c(NA,diff(IGA)),
#-1 is assigned to SCREENING as it occurs before the baseline record.
daysFromBaseline = recode(as.numeric(AVISIT),-1,0,7,14,21,28),
endDiffBaselineALT = ALT[which(VISIT_NUM == 5)] - ALT[which(VISIT_NUM == 0)],
endDiffBaselineCRP = CRP[which(VISIT_NUM == 5)] - CRP[which(VISIT_NUM == 0)],
endDiffBaselineIGA = IGA[which(VISIT_NUM == 5)] - IGA[which(VISIT_NUM == 0)]
) %>%
select(-c("VISIT_NUM","AVISIT")) %>%
mutate_if(is.integer,as.numeric)
names(PatientByVisit) = c("USUBJID","ALT","CRP","IGA","firstBiomarker","secondBiomarker",
"diffALT","diffCRP","diffIGA","daysFromBaseline",
"endDiffBaselineALT","endDiffBaselineCRP","endDiffBaselineIGA")
#Join together the PatientLevelInfo and PatientByVisit (formerly LabValuesInfo) frames
TrialFrame = left_join(PatientLevelInfo,PatientByVisit,by = 'USUBJID')
#Need to go back to following naming conventions on the race variable
summary(TrialFrame$race)
screeningFrame = TrialFrame %>% filter(daysFromBaseline == -1)
screeningFrame$age
class(screeningFrame$age)
class(as.numeric(screeningFrame$age))
screeningFrame = TrialFrame %>% filter(daysFromBaseline == -1)
screeningFrame$age
class(as.numeric(screeningFrame$age))
class(screeningFrame$age)
TrialFrame$age
class(TrialFrame$age)
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(forcats)
library(data.table)
setwd("~/Documents/GitHub/ShinyProgrammingExercise")
PatientLevelInfo = fread("Random_PatientLevelInfo_2020.tsv", stringsAsFactors = T)
LabValuesInfo = fread("Random_LabValuesInfo_2020.tsv", stringsAsFactors = T)
#Cleaning Patient Level Info
#Extract potential region identifier and patient id from USUBJID and put back into table
splitFrame = tstrsplit(PatientLevelInfo$USUBJID,"-")
PatientLevelInfo$region = paste(splitFrame[[2]],splitFrame[[3]], sep = '-')
PatientLevelInfo$patientId = splitFrame[[5]]
#Recode a treatment arm variable to be a single word describing treatment
PatientLevelInfo$ACTARM = recode(PatientLevelInfo$ACTARM,
`A: Drug X` = "drugX",
`B: Placebo` = "placebo",
`C: Combination` = "combination"
)
PatientLevelInfo$ACTARM = forcats::fct_relevel(PatientLevelInfo$ACTARM,"placebo")
#Change the naming scheme of PatientLevelInfo to begin with lowercase and capitalize each subsequent concactenated word
#USUBJID remains the same because we will use it join LabValuesInfo and PatientLevelInfo
names(PatientLevelInfo) = c("studyId","USUBJID","age","sex","race","treatmentArm","actArmCd","region","patientId")
#Drop redundant columns
PatientLevelInfo = PatientLevelInfo %>%
select(-c("actArmCd"))
#Before merging LabValuesInfo to the PatientLevelInfo we
#reconstruct it so that a single row captures the patient's 3 laboratory value measurements at a particular visit
#calculate difference of measurements between visits for each patient
#calculate the difference betwee the last recorded value week 5 and the baseline value
#create a days from baseline variable
#metadata such as the long name of ALT is excluded from the frame but displayed in the application
PatientByVisit = LabValuesInfo %>%
#make screening the first level of ALT
mutate(AVISIT = forcats::fct_relevel(AVISIT,"SCREENING")) %>%
group_by(USUBJID,AVISIT) %>%
#Collect lab values by patient + visit
summarise(ALT = AVAL[which(LBTESTCD == 'ALT')],
CRP = AVAL[which(LBTESTCD == 'CRP')],
IGA = AVAL[which(LBTESTCD == "IGA")],
BMRKR1 = unique(BMRKR1),
BMRKR2 = unique(BMRKR2)) %>%
#I want baseline to be 0 and screening to be negative (before the trial)
mutate(VISIT_NUM = as.numeric(AVISIT) - 2,
diffALT = c(NA,diff(ALT)),
diffCRP = c(NA,diff(CRP)),
diffIGA = c(NA,diff(IGA)),
#-1 is assigned to SCREENING as it occurs before the baseline record.
daysFromBaseline = recode(as.numeric(AVISIT),-1,0,7,14,21,28),
endDiffBaselineALT = ALT[which(VISIT_NUM == 5)] - ALT[which(VISIT_NUM == 0)],
endDiffBaselineCRP = CRP[which(VISIT_NUM == 5)] - CRP[which(VISIT_NUM == 0)],
endDiffBaselineIGA = IGA[which(VISIT_NUM == 5)] - IGA[which(VISIT_NUM == 0)]
) %>%
select(-c("VISIT_NUM","AVISIT")) %>%
mutate_if(is.integer,as.numeric)
names(PatientByVisit) = c("USUBJID","ALT","CRP","IGA","firstBiomarker","secondBiomarker",
"diffALT","diffCRP","diffIGA","daysFromBaseline",
"endDiffBaselineALT","endDiffBaselineCRP","endDiffBaselineIGA")
#Join together the PatientLevelInfo and PatientByVisit (formerly LabValuesInfo) frames
TrialFrame = left_join(PatientLevelInfo,PatientByVisit,by = 'USUBJID')
#Need to go back to following naming conventions on the race variable
summary(TrialFrame$race)
TrialFrame$age
class(TrialFrame$age)
TrialFrame = left_join(PatientLevelInfo,PatientByVisit,by = 'USUBJID') %>%
mutate_if(is.integer,as.numeric)
#Need to go back to following naming conventions on the race variable
summary(TrialFrame$age)
screeningFrame = TrialFrame %>% filter(daysFromBaseline == -1)
screeningFrame$age
class(TrialFrame$age)
class(screeningFrame$age)
screeningGraph = function(data,globalCovariate,selCovariate,graphType){
if(class(data[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningFrame, aes(x = age, colour = treatmentArm)) +
geom_density() +
geom_density(aes(x = age, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningFrame, aes(x = age, colour = treatmentArm)) +
geom_density()
}
}else if(class(data[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningFrame, aes(x = treatmentArm,fill = sex)) +
geom_bar(position = 'fill')  +
geom_bar(aes(x = "Overall",fill = sex),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningFrame, aes(x = treatmentArm,fill = sex)) +
geom_bar(position = 'fill')
}
}
return(p)
}
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "age")
screeningGraph(data = screeningFrame,globalCovariate = "Yes",selCovariate = "age")
screeningGraph(data = screeningFrame,globalCovariate = "Yes",selCovariate = "sex")
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "sex")
runApp()
runApp()
screeningGraph = function(data,globalCovariate,selCovariate,graphType){
if(class(data[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningFrame, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density() +
geom_density(aes(x = age, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningFrame, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
}
}else if(class(data[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningFrame, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')  +
geom_bar(aes_string(x = "Overall",fill = selCovariate),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningFrame, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')
}
}
return(p)
}
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "sex")
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "age")
return(p)
screeningGraph = function(data,globalCovariate,selCovariate,graphType){
if(class(data[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningFrame, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density() +
geom_density(aes(x = age, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningFrame, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
}
}else if(class(data[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningFrame, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')  +
geom_bar(aes_string(x = "Overall",fill = selCovariate),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningFrame, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')
}
}
return(p)
}
runApp()
names(screeningFrame)
data[["age"]]
screeningFrame[["age"]]
screeningGraph = function(data,globalCovariate,selCovariate,graphType){
if(class(data[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningFrame, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density() +
geom_density(aes(x = age, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningFrame, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
}
}else if(class(data[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningFrame, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')  +
geom_bar(aes_string(x = "Overall",fill = selCovariate),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningFrame, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')
}
}
return(p)
}
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "age")
runApp()
screeningGraph = function(data,globalCovariate,selCovariate,graphType){
if(class(data[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = data, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density() +
geom_density(aes(x = age, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = data, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
}
}else if(class(data[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = data, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')  +
geom_bar(aes_string(x = "Overall",fill = selCovariate),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = data, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')
}
}
return(p)
}
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "age")
runApp()
runApp()
function(session,input,output){
#Tab1 Patient Screening Characteristics
selScreeningGraph = renderPlot({
#screeningFrame is included in global
screeningGraph(data = screeningFrame,
globalCovariate = input$globalCovariate,
selCovariate = input$selCovariate)
})
}
output$ByVisitGraph = renderPlotly({
graphFrame = selectedData() %>%
filter(AVISIT != "SCREENING")
ggplotly(
ggplot(data = graphFrame, aes_string(x = "AVISIT",
y = input$LabMeasurement,
colour = "ACTARM")
) + geom_boxplot()
) %>% layout(boxmode = "group")
})
screeningFrame = TrialFrame %>% filter(daysFromBaseline == -1)
screeningFrame$age
#need to find out how to not have it in alphabetical order
p <- ggplot(data = screeningFrame, aes(x = age, colour = treatmentArm)) +
geom_density() + geom_density(aes(x = age, colour = "Overall"))
p
p <- ggplot(data = screeningFrame, aes(x = treatmentArm,fill = sex)) +
geom_bar(position = 'fill')  + geom_bar(aes(x = "Overall",fill = sex),position='fill')
pp
screeningGraph = function(data,globalCovariate,selCovariate,graphType){
if(class(data[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = data, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density() +
geom_density(aes_string(x = selCovariate, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = data, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
}
}else if(class(data[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = data, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')  +
geom_bar(aes_string(x = "Overall",fill = selCovariate),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = data, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')
}
}
return(p)
}
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "age")
screeningGraph = function(data,globalCovariate,selCovariate,graphType){
if(class(data[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = data, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density() +
geom_density(aes_string(x = selCovariate, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = data, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
}
}else if(class(data[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = data, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')  +
geom_bar(aes_string(x = "Overall",fill = selCovariate),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = data, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')
}
}
return(p)
}
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "age")
screeningGraph(data = screeningFrame,globalCovariate = "Yes",selCovariate = "age")
screeningGraph(data = screeningFrame,globalCovariate = "No",selCovariate = "age")
selCovariate = 'age'
ggplot(data = data, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
ggplot(data = screeningFrame, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
data
screeningGraph = function(screeningData,globalCovariate,selCovariate,graphType){
if(class(screeningData[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningData, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density() +
geom_density(aes_string(x = selCovariate, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningData, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
}
}else if(class(screeningData[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningData, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')  +
geom_bar(aes_string(x = "Overall",fill = selCovariate),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningData, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')
}
}
return(p)
}
screeningGraph(screeningData = screeningFrame,globalCovariate = "No",selCovariate = "age")
selCovariate
screeningData = screeningFrame
ggplot(data = screeningData, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
ggplot(data = screeningData, aes_string(x = selCovariate)) +
geom_density()
ggplot(data = screeningData, aes_string(x = "age")) +
geom_density()
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(forcats)
library(data.table)
setwd("~/Documents/GitHub/ShinyProgrammingExercise")
PatientLevelInfo = fread("Random_PatientLevelInfo_2020.tsv", stringsAsFactors = T)
LabValuesInfo = fread("Random_LabValuesInfo_2020.tsv", stringsAsFactors = T)
#Cleaning Patient Level Info
#Extract potential region identifier and patient id from USUBJID and put back into table
splitFrame = tstrsplit(PatientLevelInfo$USUBJID,"-")
PatientLevelInfo$region = paste(splitFrame[[2]],splitFrame[[3]], sep = '-')
PatientLevelInfo$patientId = splitFrame[[5]]
#Recode a treatment arm variable to be a single word describing treatment
PatientLevelInfo$ACTARM = recode(PatientLevelInfo$ACTARM,
`A: Drug X` = "drugX",
`B: Placebo` = "placebo",
`C: Combination` = "combination"
)
PatientLevelInfo$ACTARM = forcats::fct_relevel(PatientLevelInfo$ACTARM,"placebo")
#Change the naming scheme of PatientLevelInfo to begin with lowercase and capitalize each subsequent concactenated word
#USUBJID remains the same because we will use it join LabValuesInfo and PatientLevelInfo
names(PatientLevelInfo) = c("studyId","USUBJID","age","sex","race","treatmentArm","actArmCd","region","patientId")
#Drop redundant columns
PatientLevelInfo = PatientLevelInfo %>%
select(-c("actArmCd"))
#Before merging LabValuesInfo to the PatientLevelInfo we
#reconstruct it so that a single row captures the patient's 3 laboratory value measurements at a particular visit
#calculate difference of measurements between visits for each patient
#calculate the difference betwee the last recorded value week 5 and the baseline value
#create a days from baseline variable
#metadata such as the long name of ALT is excluded from the frame but displayed in the application
PatientByVisit = LabValuesInfo %>%
#make screening the first level of ALT
mutate(AVISIT = forcats::fct_relevel(AVISIT,"SCREENING")) %>%
group_by(USUBJID,AVISIT) %>%
#Collect lab values by patient + visit
summarise(ALT = AVAL[which(LBTESTCD == 'ALT')],
CRP = AVAL[which(LBTESTCD == 'CRP')],
IGA = AVAL[which(LBTESTCD == "IGA")],
BMRKR1 = unique(BMRKR1),
BMRKR2 = unique(BMRKR2)) %>%
#I want baseline to be 0 and screening to be negative (before the trial)
mutate(VISIT_NUM = as.numeric(AVISIT) - 2,
diffALT = c(NA,diff(ALT)),
diffCRP = c(NA,diff(CRP)),
diffIGA = c(NA,diff(IGA)),
#-1 is assigned to SCREENING as it occurs before the baseline record.
daysFromBaseline = recode(as.numeric(AVISIT),-1,0,7,14,21,28),
endDiffBaselineALT = ALT[which(VISIT_NUM == 5)] - ALT[which(VISIT_NUM == 0)],
endDiffBaselineCRP = CRP[which(VISIT_NUM == 5)] - CRP[which(VISIT_NUM == 0)],
endDiffBaselineIGA = IGA[which(VISIT_NUM == 5)] - IGA[which(VISIT_NUM == 0)]
) %>%
select(-c("VISIT_NUM","AVISIT"))
names(PatientByVisit) = c("USUBJID","ALT","CRP","IGA","firstBiomarker","secondBiomarker",
"diffALT","diffCRP","diffIGA","daysFromBaseline",
"endDiffBaselineALT","endDiffBaselineCRP","endDiffBaselineIGA")
#Join together the PatientLevelInfo and PatientByVisit (formerly LabValuesInfo) frames
TrialFrame = left_join(PatientLevelInfo,PatientByVisit,by = 'USUBJID') %>%
mutate_if(is.integer,as.numeric)
#Global so that is does not need to perform this operation when selected characteristics change
screeningFrame = TrialFrame %>% filter(daysFromBaseline == -1)
#Need to go back to following naming conventions on the race variable
summary(TrialFrame$race)
screeningGraph = function(screeningData,globalCovariate,selCovariate,graphType){
if(class(screeningData[[selCovariate]]) == 'numeric'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningData, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density() +
geom_density(aes_string(x = selCovariate, colour = "Overall"))
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningData, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
}
}else if(class(screeningData[[selCovariate]]) == 'factor'){
if(globalCovariate == "Yes"){
p <- ggplot(data = screeningData, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')  +
geom_bar(aes_string(x = "Overall",fill = selCovariate),position='fill')
}else if(globalCovariate == "No"){
p <- ggplot(data = screeningData, aes_string(x = "treatmentArm",fill = selCovariate)) +
geom_bar(position = 'fill')
}
}
return(p)
}
screeningGraph(screeningData = screeningFrame,globalCovariate = "No",selCovariate = "age")
screeningGraph(screeningData = screeningFrame,globalCovariate = "No",selCovariate = "age")
ggplot(data = screeningData, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
screeningData = screeningFrame
ggplot(data = screeningData, aes_string(x = selCovariate, colour = "treatmentArm")) +
geom_density()
ggplot(data = screeningData, aes_string(x = 'age', colour = "treatmentArm")) +
geom_density()
setwd("~/Documents/GitHub/ShinyProgrammingExercise")
